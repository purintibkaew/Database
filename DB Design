database = where we store the data
entity = something we store the data about
attribute = the infos that we store according to each entity
relation = [ (attribute1, att2, att...) => entity ] in each row / the connection between the designed attributes of a table 
(collumns in a table/ the attributes that we need to store about that entity) and the values that the entity has

--------------------------------------------------------------------------------------------------------------------------------------
  column    col       col              Entity Type / Table Name / Catagory : USER
  ============================
  name | username | password |   [1] : Attribute Type            relation = caeb's username is caeb001 /
  ============================                                      the username 'caeb001' has the password of 'pie123' 
  caeb | caeb001  | pie123   |   row/entity/tuple   [2]          -------
  ----------------------------                                   | @@@ |    entity[0]
  .... | .....    | ....     |   row/entity/tuple     <====>     |caeb |
                                                                 -------     
  
  #@ we have an entity[0] => we want to store [name, username, password][1] about that entity => we enter specific value for each one of 
  these [attributes][2] => to form the [relation][1] btween these [attributes][2] and the entity[0]
 
 ----------------------------------------------------------------------------------------------------------------------------------------
 rdbms
 view = select only the cols that we're interested or need to know about / not everyone wants to know all those infos that are stored in DB
 / we need to restrict a portion of DB for a specific guy to access
 sql = define the structure [ddl : data defination language] /manipulate the data within [dml : data manipulated language]
 create
 update
 join

database schemas/ database design
  -conceptual     ^   general/ brainstorming      | sale | -------> | customer | sale depends on customer / ER diagram
                  |
  -logical        |                               ==========================
                  |                              |            sale          |\
                  |                              ============================ ------
                  |                              | date | price | etc1 | .. |/     |
                  |                              ----------------------------      
                  |                              |     .......              |      |
                  |                              ----------------------------      |
                  |                                                                |
                  |                               ==========================       |
                  |                              |          customer        |      O
                  |                              ============================      |
                  |                              | name | date | etc1 | ..  |-|-----
                  |                              ----------------------------
                  |                              |     .......              |
                  |                              ----------------------------
  -physical       v   specific

parent <-- child   parent[pk] is needed to be exist before we can create child[fk] / if parent is removed, then chils has to be removed
  m      one(fk)   aswell
anomalies
integrity - was implemented to prevent anomalies
          entity[uniqueness], referential[pk<removed> <=> fk<also removed> : they are linked], domain[has all expected values]
